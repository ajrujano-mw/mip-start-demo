"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8367],{1446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=n(4848),o=n(8453);const r={},a="Best Practices",s={id:"mip_go/develop/best_practices",title:"Best Practices",description:"Discovering and defining the problem are practices that we already consider",source:"@site/docs/mip_go/5_develop/2_best_practices.md",sourceDirName:"mip_go/5_develop",slug:"/mip_go/develop/best_practices",permalink:"/mip-start-demo/program/mip_go/develop/best_practices",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"mipGoSidebar",previous:{title:"Purpose-Built Web Applications",permalink:"/mip-start-demo/program/mip_go/develop/web_apps"},next:{title:"New Project",permalink:"/mip-start-demo/program/mip_go/develop/new_project"}},l={},d=[{value:"Organized and Systematic (OSy)",id:"organized-and-systematic-osy",level:2},{value:"Tidy, Tested, Safe (TTS)",id:"tidy-tested-safe-tts",level:2}];function c(e){const t={a:"a",br:"br",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(t.p,{children:'Discovering and defining the problem are practices that we already consider\r\npart of our "best-practices catalog". But when it comes to development\r\nspecifically, there are some key best practices that can improve the quality of\r\nthe overall solution tremendously.'}),"\n",(0,i.jsx)(t.p,{children:"Don't think of best practices as rules that must be followed, think of them\r\nas values to be cultivated."}),"\n",(0,i.jsx)(t.p,{children:"Like safe driving, you would not take the highway with ten dogs messing\r\naround inside the car to put at risk the life of your family and the life\r\nof others just because there is no rule explicitly saying that you can't do\r\nthat."}),"\n",(0,i.jsx)(t.p,{children:"For example, at Mip Wise, we firmly believe that solutions should be\r\nreliable. So the reliability of a solution is a value that we cultivate. How?\r\nBy following best practices!"}),"\n",(0,i.jsx)(t.p,{children:"We will start discussing these best practices at a high level and then get\r\nmore specific to provide extra guidance."}),"\n",(0,i.jsx)(t.h2,{id:"organized-and-systematic-osy",children:"Organized and Systematic (OSy)"}),"\n",(0,i.jsxs)(t.p,{children:["Development is when you hand your well-defined problem over to the computer\r\nto be solved. Putting this way it may sound easier than it actually is.\r\nYou know, computers are powerful, but you have to tell them\r\n",(0,i.jsx)(t.em,{children:"exactly"})," what to do. But there is so much that you have to communicate\r\nto your computer that, if you are not organized and systematic enough, you\r\nand your computer will not understand each other, which can turn out to be a\r\ncatastrophe for the project."]}),"\n",(0,i.jsxs)(t.p,{children:["So let's make it very clear: to develop a proper solution you must be as\r\n",(0,i.jsx)(t.em,{children:"organized and systematic"})," (OSy) as you can. Later, when someone asks you\r\nhow did you build such a good solution, you can say that you were not lucky,\r\nyou were OSy! \ud83d\ude04"]}),"\n",(0,i.jsx)(t.p,{children:"By the way, this is not a rule, this is a principle. Machines are what they are."}),"\n",(0,i.jsxs)(t.p,{children:["You might be looking around right now and wondering: ",(0,i.jsx)(t.em,{children:"How do these guys\r\nexpect me to be OSy in developing a solution if I can't even manage to keep\r\nmy desk organized?"})]}),"\n",(0,i.jsx)(t.p,{children:"We know how! As Tony Robbins says, we are constantly making decisions to\r\navoid pain and have pleasure in life. If the idea of cultivating values\r\ndidn't buy you, and you are thinking that being OSy is going to be painful,\r\nthat's only because you have not felt the pain of debugging a messy code and\r\nthe pleasure of seeing your tidy code returning reliable outputs. We will\r\ngive our best to let you experience that pleasure as soon as possible,\r\nbut we're also willing to let you feel the pain of dealing with a messy code\r\nif that's required for you to convince yourself how important it is to be OSy."}),"\n",(0,i.jsx)(t.h2,{id:"tidy-tested-safe-tts",children:"Tidy, Tested, Safe (TTS)"}),"\n",(0,i.jsxs)(t.p,{children:["Being organized and systematic is a high-level concept. To make it more\r\npractical and precise, let's have a look at the ",(0,i.jsx)(t.a,{href:"https://ttspython.org/",children:"Tidy, Tested, Safe"}),"\r\n(TTS) framework, which has been proposed by ",(0,i.jsx)(t.a,{href:"https://github.com/pjcpjc",children:"Pete Cacioppi"}),", a very\r\nexperienced programmer who is truly passionate about Python and solving\r\nreal-world problems."]}),"\n",(0,i.jsx)(t.p,{children:"TTS provides a mental model to track key aspects of a maintainable and\r\nreliable solution. Next, we provide a quick overview of the framework. But we\r\nwill dive deeper into these topics later on when it's appropriated."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Tidy"}),"\r\nTidy is about organization and style. Not only does the code within a\r\nscript deserves to be organized, but also the directory that hosts the script\r\nfiles and data, the git-flow strategy, documentation, etc. And there is no\r\nneed to reinvent the wheel here, it's just a matter of following\r\napproaches that have already been proven efficient."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Tested"}),(0,i.jsx)(t.br,{}),"\n","To be reliable, the code must be tested. In Python especially, it's easy to\r\nimplement things in a hacky way that works for a given scenario. But\r\nbuilding an enterprise-grade application requires more than \"Hey, it worked\r\nnow!\". In fact, the best way to efficiently and reliably test your code is\r\nby writing unit testing. And you will see that, in Python, doing automated\r\nunit testing it's much easier than it might sound."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Safe"}),(0,i.jsx)(t.br,{}),"\n","Even a well-written and tested code can easily break if it can't handle bad\r\ndata. Naive developers will attempt to handle bad data by trying to guess\r\nwhat can go wrong and implementing catches to handle the exceptions they have\r\nidentified. However, it's nearly impossible to predict all that can go wrong\r\nwith data. So a much more systematic approach is required."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["We summarize TTS with a quote from Pete:",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.em,{children:"Write normal Python. Automate the tests. Protect against dirty data."})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:"Next, you will start creating your first project, right here\r\nin Pycharm!"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var i=n(6540);const o={},r=i.createContext(o);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);